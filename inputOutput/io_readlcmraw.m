% io_readlcmraw.m
% Jamie Near, McGill University 2014.
% 
% USAGE:
% out=io_readlcmraw(filename,type);
% 
% DESCRIPTION:
% Reads LCModel raw data format into the FID-A data structure format in MATLAB.
% 
% INPUTS:
% filename   = filename of LCModel raw file.
% type       = type of LCModel raw file:
%               'rda' - .raw file generated from Siemens RDA file
%               'dat' - .raw file generated by FID-A using io_writelcm.
%               'sim' - .raw file generated from FID-A simulated data.
%               'raw' - not sure about this one.
%
% OUTPUTS:
% out        = Input dataset in FID-A structure format.

function [out]=io_readlcmraw(filename,type)

fid=fopen(filename);
linenum=1;
line=fgets(fid);

switch type
    case 'rda'
        
        Bo_index=findstr(line,'hzpppm');
        while isempty(Bo_index);
            line=fgets(fid);
            Bo_index=findstr(line,'hzpppm');
        end
        
        hzpppm=str2num(line(9:end))
        Bo=hzpppm/42.5939971;
        line=fgets(fid);
        line=fgets(fid);
        line=fgets(fid);
        line=fgets(fid);
        %NOTE:  MAKING SOME ASSUMPTIONS ABOUT DATA SIZE>>
        vectorsize=2048;
        spectralwidth=2000;
        
    case 'dat'
        Bo_index=findstr(line,'hzpppm');
        while isempty(Bo_index);
            line=fgets(fid);
            Bo_index=findstr(line,'hzpppm');
        end
        hzpppm=str2num(line(9:end));
        Bo=hzpppm/42.5939971;
        
        size_index=findstr(line,'NumberOfPoints');
        while isempty(size_index);
            line=fgets(fid);
            size_index=findstr(line,'NumberOfPoints');
        end
        vectorsize=str2num(line(17:end));
        
        sweep_index=findstr(line,'dwellTime');
        while isempty(sweep_index);
            line=fgets(fid);
            sweep_index=findstr(line,'dwellTime');
        end
        dwelltime=str2num(line(12:end));
        spectralwidth=1/dwelltime;
        
        line=fgets(fid);
        line=fgets(fid);
        
    case 'sim'
        Bo_index=findstr(line,'hzpppm');
        while isempty(Bo_index);
            line=fgets(fid);
            Bo_index=findstr(line,'hzpppm');
        end
        
        hzpppm=str2num(line(9:end))
        Bo=hzpppm/42.5939971;
        line=fgets(fid);
        line=fgets(fid);
        line=fgets(fid);
        line=fgets(fid);
        %NOTE:  MAKING SOME ASSUMPTIONS ABOUT DATA SIZE>>
        vectorsize=2048;
        spectralwidth=2000;
        dwelltime=1/spectralwidth;
        
    case 'raw'
        sweep_index=findstr(line,'Sweep Width');
        while isempty(sweep_index);
            line=fgets(fid);
            sweep_index=findstr(line,'Sweep Width');
        end
        spectralwidth=str2num(line(16:24));
        dwelltime=1/spectralwidth;
        
        size_index=findstr(line,'Vector Size');
        while isempty(size_index);
            line=fgets(fid);
            size_index=findstr(line,'Vector Size');
        end
        vectorsize=str2num(line(16:20));
        
        Bo_index=findstr(line,'B0 Field');
        while isempty(Bo_index);
            line=fgets(fid);
            Bo_index=findstr(line,'B0 Field');
        end
        Bo=str2num(line(16:21));
        hzpppm=Bo*42.5939971;
        
                
    otherwise 
        error('ERROR:  invalid type');
end


hdrEnd_index=findstr(line,'$END');
while isempty(hdrEnd_index);
    line=fgets(fid);
    hdrEnd_index=findstr(line,'$END');
end

line=fgets(fid);

% If the line is empty skip it
while line~=-1
    %dataline=line(1:semicol_index-2);
    [A,count, errmsg, nextindex] = sscanf(line, '%f', inf);
    % If read failed, output the error     
    if ~isempty(errmsg);
       fclose(fid);
       error('READLCMRAW failed with read error: %s', errmsg);
    end
    % Store the read values into rf array
    RF(linenum) = A(1)+i*A(2); %sometimes "+", sometimes "-".  Swaps ppm scale;
    linenum = linenum + 1;
    line=fgets(fid);
end
sz=[vectorsize 1];
out.fids=RF';
out.specs=fftshift(ifft(out.fids));
out.sz=[vectorsize 1 1 1];
out.spectralwidth=spectralwidth;
out.sz=sz;
out.Bo=Bo;
out.dwelltime=1/out.spectralwidth;

f=[(-spectralwidth/2)+(spectralwidth/(2*sz(1))):spectralwidth/(sz(1)):(spectralwidth/2)-(spectralwidth/(2*sz(1)))];

A=1;
if type=='sim'
    A=-1;
end
ppm=A*-f/(Bo*42.577);
ppm=ppm+4.65;
out.ppm=ppm;

t=[0:dwelltime:(vectorsize-1)*dwelltime];
out.t=t;

txfrq=hzpppm*1e6;
out.txfrq=txfrq;

out.date=date;
out.seq='';

out.dims.t=1;
out.dims.coils=0;
out.dims.averages=0;
out.dims.subSpecs=0;
out.dims.extras=0;

out.averages=1;
out.rawAverages=1;

out.flags.writtentostruct=1;
out.flags.gotparams=1;
out.flags.leftshifted=1;
out.flags.filtered=0;
out.flags.zeropadded=0;
out.flags.freqcorrected=0;
out.flags.phasecorrected=0;
out.flags.averaged=1;
out.flags.addedrcvrs=1;
out.flags.subtracted=1;
out.flags.writtentotext=1;
out.flags.downsampled=0;
out.flags.isFourSteps=0;

fclose(fid);
   
% RF=RF';
% rf(:,1)=RF(:,2)*180/pi;
% rf(:,2)=RF(:,1);
% rf(:,3)=ones(length(RF(:,1)),1);