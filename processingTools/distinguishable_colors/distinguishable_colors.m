function colors = distinguishable_colors(n_colors,bg,func)
% DISTINGUISHABLE_COLORS: pick colors that are maximally perceptually distinct
%
% When plotting a set of lines, you may want to distinguish them by color.
% By default, Matlab chooses a small set of colors and cycles among them,
% and so if you have more than a few lines there will be confusion about
% which line is which. To fix this problem, one would want to be able to
% pick a much larger set of distinct colors, where the number of colors
% equals or exceeds the number of lines you want to plot. Because our
% ability to distinguish among colors has limits, one should choose these
% colors to be "maximally perceptually distinguishable."
%
% This function generates a set of colors which are distinguishable
% by reference to the "Lab" color space, which more closely matches
% human color perception than RGB. Given an initial large list of possible
% colors, it iteratively chooses the entry in the list that is farthest (in
% Lab space) from all previously-chosen entries. While this "greedy"
% algorithm does not yield a global maximum, it is simple and efficient.
% Moreover, the sequence of colors is consistent no matter how many you
% request, which facilitates the users' ability to learn the color order
% and avoids major changes in the appearance of plots when adding or
% removing lines.
%
% Syntax:
%   colors = distinguishable_colors(n_colors)
% Specify the number of colors you want as a scalar, n_colors. This will
% generate an n_colors-by-3 matrix, each row representing an RGB
% color triple. If you don't precisely know how many you will need in
% advance, there is no harm (other than execution time) in specifying
% slightly more than you think you will need.
%
%   colors = distinguishable_colors(n_colors,bg)
% This syntax allows you to specify the background color, to make sure that
% your colors are also distinguishable from the background. Default value
% is white. bg may be specified as an RGB triple or as one of the standard
% "ColorSpec" strings. You can even specify multiple colors:
%     bg = {'w','k'}
% or
%     bg = [1 1 1; 0 0 0]
% will only produce colors that are distinguishable from both white and
% black.
%
%   colors = distinguishable_colors(n_colors,bg,rgb2labfunc)
% By default, distinguishable_colors uses the image processing toolbox's
% color conversion functions makecform and applycform. Alternatively, you
% can supply your own color conversion function.
%
% Example:
%   c = distinguishable_colors(25);
%   figure
%   image(reshape(c,[1 size(c)]))
%
% Example using the file exchange's 'colorspace':
%   func = @(x) colorspace('RGB->Lab',x);
%   c = distinguishable_colors(25,'w',func);

% Copyright 2010-2011 by Timothy E. Holy

  % Parse the inputs
  if (nargin < 2)
    bg = [1 1 1];  % default white background
  else
    if iscell(bg)
      % User specified a list of colors as a cell aray
      bgc = bg;
      for i = 1:length(bgc)
	bgc{i} = parsecolor(bgc{i});
      end
      bg = cat(1,bgc{:});
    else
      % User specified a numeric array of colors (n-by-3)
      bg = parsecolor(bg);
    end
  end
  
  % Generate a sizable number of RGB triples. This represents our space of
  % possible choices. By starting in RGB space, we ensure that all of the
  % colors can be generated by the monitor.
  n_grid = 30;  % number of grid divisions along each axis in RGB space
  x = linspace(0,1,n_grid);
  [R,G,B] = ndgrid(x,x,x);
  rgb = [R(:) G(:) B(:)];
  if (n_colors > size(rgb,1)/3)
    error('You can''t readily distinguish that many colors');
  end
  
  % Convert to Lab color space, which more closely represents human
  % perception
  if (nargin > 2)
    lab = func(rgb);
    bglab = func(bg);
  else
      %Octave doesn't has makecform,applycform libraries - **PT**2025
      if exist('OCTAVE_VERSION','builtin')~=0 % Running in Octave
          lab = rgb2lab_oct(rgb);
          bglab = rgb2lab_oct(bg);
      else % Running in MATLAB
          C = makecform('srgb2lab');
          lab = applycform(rgb,C);
          bglab = applycform(bg,C);
      end
  end

  % If the user specified multiple background colors, compute distances
  % from the candidate colors to the background colors
  mindist2 = inf(size(rgb,1),1);
  for i = 1:size(bglab,1)-1
    dX = bsxfun(@minus,lab,bglab(i,:)); % displacement all colors from bg
    dist2 = sum(dX.^2,2);  % square distance
    mindist2 = min(dist2,mindist2);  % dist2 to closest previously-chosen color
  end
  
  % Iteratively pick the color that maximizes the distance to the nearest
  % already-picked color
  colors = zeros(n_colors,3);
  lastlab = bglab(end,:);   % initialize by making the "previous" color equal to background
  for i = 1:n_colors
    dX = bsxfun(@minus,lab,lastlab); % displacement of last from all colors on list
    dist2 = sum(dX.^2,2);  % square distance
    mindist2 = min(dist2,mindist2);  % dist2 to closest previously-chosen color
    [~,index] = max(mindist2);  % find the entry farthest from all previously-chosen colors
    colors(i,:) = rgb(index,:);  % save for output
    lastlab = lab(index,:);  % prepare for next iteration
  end
end

function c = parsecolor(s)
  if ischar(s)
    c = colorstr2rgb(s);
  elseif isnumeric(s) && size(s,2) == 3
    c = s;
  else
    error('MATLAB:InvalidColorSpec','Color specification cannot be parsed.');
  end
end

function c = colorstr2rgb(c)
  % Convert a color string to an RGB value.
  % This is cribbed from Matlab's whitebg function.
  % Why don't they make this a stand-alone function?
  rgbspec = [1 0 0;0 1 0;0 0 1;1 1 1;0 1 1;1 0 1;1 1 0;0 0 0];
  cspec = 'rgbwcmyk';
  k = find(cspec==c(1));
  if isempty(k)
    error('MATLAB:InvalidColorString','Unknown color string.');
  end
  if k~=3 || length(c)==1,
    c = rgbspec(k,:);
  elseif length(c)>2,
    if strcmpi(c(1:3),'bla')
      c = [0 0 0];
    elseif strcmpi(c(1:3),'blu')
      c = [0 0 1];
    else
      error('MATLAB:UnknownColorString', 'Unknown color string.');
    end
  end
end

%Adding in function for Octave, as it doesn't support makecform&applycform - **PT**2025
function lab = rgb2lab_oct(rgb)
  % RGB2LAB_OCT: Convert sRGB values in [0,1] to CIELAB (Lab) color space.
  % Input:  Nx3 matrix of RGB values, range [0,1]
  % Output: Nx3 matrix of Lab values [L*, a*, b*]

  % --- Step 1: Linearize sRGB (remove gamma correction) ---
  % sRGB is gamma-compressed; we need to convert it to linear light values.
  % Reference: IEC 61966-2-1 (sRGB standard)
  mask = rgb <= 0.04045;
  rgb(mask) = rgb(mask)/12.92;                  % linear for dark values
  rgb(~mask) = ((rgb(~mask)+0.055)/1.055).^2.4; % power law for bright values
  rgb = rgb * 100; % scale to [0,100] (matches XYZ reference scale)

  % --- Step 2: sRGB → CIE XYZ ---
  % This is a linear transformation using the sRGB-to-XYZ matrix
  % under D65 illuminant (standard daylight white point).
  % Numbers come from the official sRGB specification.
  M = [0.4124564 0.3575761 0.1804375;  % X coefficients
       0.2126729 0.7151522 0.0721750;  % Y coefficients
       0.0193339 0.1191920 0.9503041]; % Z coefficients
  XYZ = rgb * M';

  % --- Step 3: Normalize by reference white (D65) ---
  % CIELAB requires normalization relative to a "reference white".
  % D65 white point in CIE XYZ is:
  refX = 95.047;
  refY = 100.000;
  refZ = 108.883;
  X = XYZ(:,1)/refX;
  Y = XYZ(:,2)/refY;
  Z = XYZ(:,3)/refZ;

  % --- Step 4: XYZ → Lab nonlinear transform ---
  % CIELAB uses a cube root transform, but with a linear fallback for very
  % small values to avoid instability. Threshold = 0.008856.
  f = @(t) (t > 0.008856) .* (t.^(1/3)) + ...
           (t <= 0.008856) .* (7.787.*t + 16/116);

  fX = f(X);
  fY = f(Y);
  fZ = f(Z);

  % --- Step 5: Compute L*, a*, b* ---
  % Standard CIELAB equations:
  % L* = 116*f(Y) - 16      (0 = black, 100 = white)
  % a* = 500*(f(X) - f(Y))  (green ↔ red axis)
  % b* = 200*(f(Y) - f(Z))  (blue ↔ yellow axis)
  L = 116*fY - 16;
  a = 500*(fX - fY);
  b = 200*(fY - fZ);

  % --- Output ---
  lab = [L a b];
end